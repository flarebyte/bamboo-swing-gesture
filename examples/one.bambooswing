id-urn: company7/project12/1235775
license,en: Creative Commons
license-url,json,en: http://website.com/license
attribution-name,en-gb: Firstname LastName
attribution-url,html,en: http://website.com/creator
title,en: My title
description,en: Single line description
metadata-url,rdf,en: http://website.com/meta
homepage-url,markdown,en: https://github.com/owner/project#readme
--- Inputs ---
$A: Single; Bits(5);
$A = b10101

$B: List: range (1 to 12); Bits(3)
$B = [b101, b100]

$D: List: range (1 to 10); Fraction: range (-1 to 1/3 or 2/3 to 1) and not (-1 or 0 or 1/12)
$D = [-1/3, -2/3]

$E: List: (1 to 10); Fraction: range (0 to 1); fraction: range (0 to 1)
$E = [(1/3, 1/4), (1/4, 1/5)]

$F: Single; Fraction: enum (1/2, 1/3, 1/5, 1/8)
$F = 1/3

$G: Single; Integer: enum (1, 3, 5)
$G = 3

$H: Single; entity

--- Helpers ---

myRatios: List[Fraction]
myRatios = [-1, -1/6, 0, 1/3, 1/4]

nextFibonacci: Integer -> Integer
nextFibonacci x = 
    case x of 
        0 -> 1 
        1 -> 1 
        otherwise -> fib (x-1) + fib (x-2)

fibonacciList: Integer -> List Integer
fibonacciList x =
    List.map nextFibonacci (List.range 1 x)

pointA: (Fraction, Fraction)
pointA = (1/4, 3/7)

distanceA: Fraction
distanceA = 1/4

--- Gestures ---
pointB: (Fraction, Fraction)

drawArm =
    |> Draw.toward pointA distanceA

pointB = Draw.asPoint drawArm


